////////////////////////////////////////////////////////////
	実装案件
////////////////////////////////////////////////////////////

+ ソースを整理する。
+ コメントを書き込む。
+ 文字送りモードを実装。
	+ モードとその仕様は以下である。
		+ ノーマルモード
			+ 普通に決定キーで次のメッセージへ。
		+ オートモード
			+ 決定キーを押さなくても次のメッセージへ。
			+ 選択肢で止まる。
		+ スキップモード
			+ 文字を一括表示し、次のメッセージへ。
			+ 選択肢で止まる。
		+ 基本的に選選択肢を選択後のモードは引き継がれるものとする。
+ サウンド再生（BGM、SE、Voise）を実装する。
	+ できるのか。。。
+ スライダーをxmlで設計、操作できるようにする。
	+ スライダーの内部設計はTest/slider.csを参照。
+ ボタンをxmlで設計、操作できるようにする。
	+ ボタンのクリック時の動作は以下である。
		+ loadStateへの状態遷移。
		+ saveStateへの状態遷移。
		+ settingStateへの状態遷移。
		+ 元のstateへの状態遷移(stateStackをPop)。
		+ default（Configのパラメータもデフォルト）に戻す（settingState専用）。
		+ gameStateへの状態遷移。
		+ viewStateへの状態遷移。
		+ 終了シークエンス。
+ チェックボックスUIをxmlで設計、操作できるようにする。
	+ デザインはデザイナーがやる。
		+ チェック欄とチェックはデザイナーの画像を採用する。
	+ 選択時の実装はプログラマがやる。
	+ 必要な動作は以下である。
		+ 画面サイズ変更。
		+ スキップを既読、未読の二択。
+ 選択肢をキー操作だけじゃなく、マウスでも選択できるようにする。
+ SaveとLoad機能を実装。
	+ DataCellはDataCell用のタグにする。
		+ Xmlで書けるようにする？決め打ち？
	+ やっぱり、デザイナーに任せれる実装にする！
	+ UIはどうするの？ -> デザイナーが画像を用意してもらい、それを挿入できるような実装にする。
+ Scriptに変数（bool型で）を実装。
+ Scriptにif-elseを実装。
	+ 例えば、bool型変数でjampタグのtarget先を変化させる。
+ Viewerを実装する。
	+ ユーザが未視聴であるCGをどのようにして判断実装するか。
+ スタッフロールも実装したい。。。

============================================================
仮仕様
============================================================

+ 以下の基準時は原則、ウィンドウサイズ800x600とする。
+ キャラクターの画像の規格を800x1200とする。
	+ 表示において基準時、400x600で表示。
+ 背景画像の規格は800x600とする。
	+ 表示において基準時、800x600で表示。
+ Scriptで画像を記入する場合は、基準時の座標を指定する。

+ テキスト速度は1から5の範囲である。
+ 画像ファイルは同じディレクトリ階層にない画像ファイルであっても同じ名前にしてはいけない。
+ ボタンUIに設定できるメソッドは以下のとおりとする。
	+ gamestart : ゲーム状態に遷移する。
	+ setting : Setting状態に遷移する。
	+ back : 戻る。
		+ 元の遷移先がないものにこのメソッドを指定するとエラーが起きます。
+ フリガナは「読み仮名（よみがな）」のようにする。
+ 主人公以外のセリフ台変更はスクリプトで変更できるから、製作者が変更する。

------------------------------------------------------------
2019/08/22
------------------------------------------------------------

+ 今日から、コンパイル方法をcscからdotnetに変更。
	+ 本来、.NET Coreのコンパイラだが.NET Frameworkでもコンパイル可能。
+ 実行モードは以下の三つある。
	+ DebugLogモード  ：デバッグメニュー,コンソール画面,Log出力
	+ ReleaseLogモード：コンソール画面,Log出力
	+ Realeseモード   ：特になし
+ 今の実行方法
	+ debuglog.bat  ：DebugLogモードで起動。
	+ releaselog.bat：ReleaseLogモードで起動。
	+ release.bat   ：Releaseモードで起動。

------------------------------------------------------------
2019/08/21
------------------------------------------------------------

+ スライダーUIの実装でテキスト速度変更できるようにした。
	+ 他にも音量調節機能を実装したい。
	+ Method属性で切り替える？（未実装）

------------------------------------------------------------
2019/08/20
------------------------------------------------------------

+ チェックボックスリストの実装。
	+ とりあえず、画面サイズは変更できるようにした。
	+ 妹ラブではスキップモードについても変更できているため、今後その実装したい。
+ Setting状態から、せって変更できるようになった。
+ title <-> loadingの状態遷移をなし
+ setting <-> titleはあくまでもBackできるだけ。
	+ game -> setting -> titleは不可能。
	+ game -> titleはtitleボタンを実装。
+ スライダーUIも実装。
	+ 設定変更はまだ…

------------------------------------------------------------
2019/08/19
------------------------------------------------------------

+ 決定キーを長押しするとうまく表示されないバグが発生。
	+ できたら、長押し中はオートモードか、スキップモードで
	+ とりあえず、決定キーの判断タイミングを変更。
		+ 長押しを対策の判断タイミングはキーを放したときにする。
+ ボタンUIのクリック時の動作をmethodで指定できるようになった。
	+ もし、規定されていないものを指定されても、クリック動作しないだけ。
+ Titleから仮Setting状態に遷移する実装をした。
	+ ボタンUIにSetting状態遷移メソッドを実装。
+ ボタンUIの戻るメソッドを追加。
+ xmlMachineの実装一部変更。
	+ 必要な初期化は、それぞれのLayerに任せる。
+ テンプレ的なものを作るbatファイルを作る。
	+ 状態関連の追加。
		+ 新しいStateクラスを実装。
		+ 新しいStateLayerManagerを実装。
	+ ../State.exe Test で以下に自走生成されるファイル名を明示する。
		+ ./States/TestState.cs
		+ ./LayerManaegr/TestStateManager.cs
		+ ./Xml/Test.fnmx
	+ レイヤー関連の追加。
		+ 新しいLayerクラスを実装。
		+ 新しいConstを追加実装。
	+ ../Layer.exe Test で以下に自走生成されるファイル名を明示する。
		+ ./Layer/TestLayer.cs
		+ ./Const/Test.cs

------------------------------------------------------------
2019/08/18
------------------------------------------------------------

本日の進捗！
+ Transition、Waitタグ中に決定を押しまくると、一部内容が飛んでしまう。
	+ 解決策として、決定操作可能かどうかを制御フラグで行う。
	+ 結果、解決。
+ Buttonを実装。
	+ ただし、GameStartボタンのみを実装したため、ほかのメソッドは未実装。
	+ しかも、レイヤー名決め打ちで実装しているため、それを変更したい。
		+ 具体的に、ボタンのところにMethod属性を追加し、それで判断させる。

------------------------------------------------------------
2019/08/17
------------------------------------------------------------

本日の新着！
なし

（重要）
画像ファイルはプログラムの都合上同じ名前にしてはいけない。
たとえ、同じディレクトリ階層にない画像ファイルであっても。

------------------------------------------------------------
2019/08/16
------------------------------------------------------------

本日の進捗！
+ xmlファイルを出力するようにした。
	+ 08/18に取りやめた。

------------------------------------------------------------
2019/08/15
------------------------------------------------------------

本日の進捗！
+ タイトル状態からゲーム状態に遷移する実装
	+ 簡単にするためにreturnキーを押したら、その状態にいくような実装。
	+ States.TitleStateを追加
	+ TitleLayerManageを追加
	+ title.fnmsファイルを追加
	+ LayerManage関連をLayerManageディレクトリにまとめる
+ タイトルらしく文字を表示することを実装
	+ Const.Labelを追加
	+ Layers.LabelLayerを追加

------------------------------------------------------------

+ この実装は自動化した。

Constを増やす注意点(Layerを増やすとき)
+ Program.csのInitParamに増えたConst.ParamUpdate追記
+ GameForm.csのConstParamupdateに増えたConst.ParamUpdate追記

------------------------------------------------------------
2019/08/14
------------------------------------------------------------

本日の進捗！
+ Transitionのdelta_alphaの計算方法を以下に示すようにする。
	+ 今までなんでこの方法にしなかったか。。。
	+ Alphaの仕様は255が不透明、0が透明の256で指定する（C#仕様の確認）
	+ 「255 - 255 / need_change_time_ * elapsed_time_msec_」で更新。
		+ elapsed_time_msec = current_Time - oldTime
	+ 結果、うまくいった。かなりなめらかに遷移しているように見える。
+ Transitionの画像がうまく取り出せない問題が起きた。
	+ 原因として、表示させたい内容である画像をもとの画像であるメモリ参照していた。
	　そのため、画像が書き換わったものが残っており、求める画像が表示されなかった。
	+ 解決策として、表示させたい内容である画像を別のメモリで確保する。
	　その後、出力させたい画像で確保したメモリに画像処理を行うことで、解決。
	　以上を行うことで、素材画像のメモリを侵害することを防いだ。
+ Transitionのcrossfadeとscrolltop、scrollbottomを改善。（13:04）
+ Logの仕様を変更する。
	+ Log┬2019_08_01┬21_19_01_log.txt
		 │          ├21_23_00_log.txt
		 │			 └22_24_32_log.txt
		 └2019_08_02─01_59_59_log.txt
	+ 以上のように、./Log/yyyy_MM_dd/hh_mm_ss_log.txt形式で出力させる。
	+ なお、y:年、M:月、d:日、h:時、m:分、s:秒を示す。
+ Scriptのコマンドを<>で指定するようにした。
	+ キャラ名を表示するために表記変更
+ Messageで、キャラの名前表示について
	+ []内の名前を表示させたい。
	+ Commands.Messageで判別する。
	+ 具体的に、Messageの最初の位置が[でないなら、改行してメッセージを表示させる。
	+ キャラクター名を表示できるようにした。
+ 暇だったから、プロローグと巫女視点の話のやつを実装した。
	+ 問題発生！
	+ うまく実行してくれないCommandが発生。
	+ jamp後のReload後のScriptMachine.Executeの最初のCommadが実行してくれない。
	+ でも、なぜかbool型は返ってくる。
	+ 原因不明！
+ （重要）キャラクターの画像の規格を800x1200とする。

------------------------------------------------------------

+ （重要）画像メモリアクセスの内容は以下ようになっている。
	+ 条件：x in range(0, image.Width)。y in range(0, image.Height)。
	　　　　画像メモリは一次元配列(imageData)。画素のメモリはARGBで確保。
	+ 画像の画素にアクセスする式は以下のようになっている。
		pos = y * imageData.Stride +  x * 4
		imageData[pos+ 3] : その画素のアルファ値
		imageData[pos+ 2] : その画素のレッド値
		imageData[pos+ 1] : その画素のグリーン値
		imageData[pos  ] : その画素のブルー値

------------------------------------------------------------
2019/08/13
------------------------------------------------------------

本日の進捗！
（+ FPSの向上(更新と描写を分けるて、フレームスキップを行った※1)）
	（+ しかし、うまくいかず。。。）
+ 画像の解像度を最大値(1600x1200)にし、画像の補間設定を変更したら、何とかFPSが上がった。※2
+ 起動時にとりあえずすべての画像を読み込んで、高速化を図る。
	+ 結果、うまくいかず。。。
+ TransitionでFPSが極端に下がる。。。
	+ Transitionを要改善
+ Transitionのcrossfadeを改善
	+ （重要）結局、画像解像度も下げた(800x600)。
	+ Bitmap内のメモリ領域に直接操作する。
		+ 画素に直接アクセスする。（ポインタでメモリアクセス）
		+ unsafeを使う
	+ しかし、どうやってもFPSが20以下。。。
+ とりあえず、Trasitionのdelta_alphaの計算を考え直す必要あり
+ OpenGLを使うことを検討するかな？

※1：詳しくは「http://www.clks.jp/csg/gt002.html」を参照
※2：詳しくは「https://imagingsolution.net/program/csharp/interpolationmode/」を参照

------------------------------------------------------------
2019/08/12
------------------------------------------------------------

本日の進捗！
+ 選択肢の実装(決め打ちのため改良したい。。。)
+ FPS表示を実装(FPSが最悪なのがよくわかる汗)
+ StateManaegeクラスの実装(State遷移の布石)
+ jampの実装(（重要）jamp先のラベルの開始は「*start」にする仕様)

------------------------------------------------------------

FPSが10なのです。。。

------------------------------------------------------------
2019/08/11
------------------------------------------------------------

（重要）

使用感を試す場合は、デバッグモードの「debug.bat」か通称モードの「release.bat」をダブルクリック。
以上を行うと勝手にゲームが開始される。

以下はデバッグ関係の操作方法を書く。
+ デバッグメニューの開閉は「Ctrl+ Shft+ D」で行う。
+ デバッグメニューの各コンテンツの選択は上下キーで行う。
+ デバッグメニューの各コンテンツの決定は「S(Set)」で行う。
+ 選択され決定されたコンテンツはメニューの並び順に順番に表示される。

また、設定(画面幅や文字速度)を変更したい場合は、以下のファイルをいじる。
./Config/config.conf
また、構成内容は以下のとおりであり、それぞれのパラメータを改行区切りで実装。
1行目：画面幅
2行目：画面高さ
3行目：文字速度
例えば、画面640x480の文字速度:1にしたいなら、
640
480
1
にする。また、画面800x600の文字速度:5にしたいなら、
800
600
5
となる。
------------------------------------------------------------
2019/07/16
------------------------------------------------------------

別フォルダのクラスを参照する場合は、一度dllする必要がある？
　->　必要なし。
	　コンパイル時ソースを指定(f.g. csc *.cs Folder/*.cs)でできる。

この対象フォルダが多く指定がめんどくさい場合、Makefileやそれこそdllで対処する。

dllは[csc /target:library *.cs]でdll化可能
これを紐付ける場合は、[csc /r:targetDllFolder/targetDll.dll *.cs]でコンパイルする。

------------------------------------------------------------
2019/07/08
------------------------------------------------------------

10:48 -> 表示されない要因を探す。

------------------------------------------------------------
2019/07/03
------------------------------------------------------------

ChangeLayerImageの引数を変更
また、座標も変更できるようにChangeLayerメンバ関数を追加

GameFormにUpdateメンバ関数を追加
NovelDesign.GiveToの中身を毎回変更させる必要はない。

今後Scriptの処理はNovelDesignが行い、それをGameFormに渡すようにする。
そのために、PartsのLayerを管理するClassを作る。

NovelImagePartsの凝縮度が0.5なので、もしかしたらまだ問題を見極めきれてないかも…

レイヤー変更はあくまでも、スクリプトで行う

------------------------------------------------------------
2019/07/02
------------------------------------------------------------

ChangeLayerImageの引数にPanelがある。
これが、後々問題にならないか心配。。。

凝縮度が悪く(1に近く)なってないか要確認
